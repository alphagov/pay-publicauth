<?xml version="1.0" encoding="UTF-8"?>

<databaseChangeLog
        xmlns="http://www.liquibase.org/xml/ns/dbchangelog"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog
         http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.1.xsd">

    <changeSet id="build token table" author="">
        <createTable tableName="tokens">
            <column name="token_id" type="bigserial" autoIncrement="true">
                <constraints primaryKey="true" nullable="false"/>
            </column>
            <column name="token_hash" type="varchar(255)">
                <constraints nullable="false" unique="true"/>
            </column>
            <column name="account_id" type="varchar(255)">
                <constraints nullable="false"/>
            </column>
            <column name="issued" type="timestamp without timezone" defaultValueComputed="(now() at time zone 'utc')">
                <constraints nullable="false"/>
            </column>
            <column name="revoked" type="timestamp without timezone">
                <constraints nullable="true"/>
            </column>
        </createTable>
        <createIndex indexName="idx_token_hash_revoked"
                     tableName="tokens">
            <column name="token_hash"/>
            <column name="revoked"/>
        </createIndex>
        <createIndex indexName="idx_account_id_revoked"
                     tableName="tokens">
            <column name="account_id"/>
            <column name="revoked"/>
        </createIndex>
    </changeSet>

    <changeSet id="add tokenlink and description columns to tokens table" author="">
        <addColumn tableName="tokens">
            <column name="token_link" type="char(36)" defaultValueComputed="(uuid_generate_v4())">
                <constraints nullable="false" unique="true"/>
            </column>
        </addColumn>
        <addColumn tableName="tokens">
            <column name="description" type="varchar(255)" defaultValue="">
                <constraints nullable="false" unique="false"/>
            </column>
        </addColumn>
        <createIndex indexName="idx_token_link" tableName="tokens">
            <column name="token_link"/>
        </createIndex>
    </changeSet>

    <changeSet id="add new columns, created_by and last_used" author="">
        <addColumn tableName="tokens">
            <column name="created_by" type="varchar(255)">
                <constraints nullable="true" unique="false"/>
            </column>
        </addColumn>

        <!-- migrate existing tokens to have a default value of 'Not Stored' before adding a Not Null constraint-->
        <sql>
            UPDATE tokens SET created_by = 'Not Stored';
        </sql>

        <addNotNullConstraint columnName="created_by" tableName="tokens"/>

        <addColumn tableName="tokens">
            <column name="last_used" type="timestamp without timezone">
                <constraints nullable="true"/>
            </column>
        </addColumn>
    </changeSet>
    
    <changeSet id="add token_type column to tokens table" author="">
        <addColumn tableName="tokens">
            <column name="token_type" type="varchar(36)">
                <constraints nullable="true" unique="false"/>
            </column>
        </addColumn>

        <addDefaultValue tableName="tokens" columnName="token_type" defaultValue="CARD"/>
    </changeSet>

    <changeSet id="add type column to tokens table" author="">
        <addColumn tableName="tokens">
            <column name="type" type="varchar(36)">
                <constraints nullable="true" unique="false"/>
            </column>
        </addColumn>
    </changeSet>

    <changeSet id="add default value to type in tokens table" author="">
        <addDefaultValue tableName="tokens" columnName="type" defaultValue="API"/>
    </changeSet>

    <changeSet id="backfill existing tokens with API default value" author="">
        <sql>
            UPDATE tokens SET type = 'API';
        </sql>
    </changeSet>

    <changeSet id="create empty table to test concourse db migration" author="">
        <createTable tableName="test_concourse_db_migration">
            <column name="id" type="bigserial" autoIncrement="true">
                <constraints primaryKey="true" nullable="false"/>
            </column>
        </createTable>
    </changeSet>

    <changeSet id="remove empty table to test concourse db migration" author="">
        <dropTable cascadeConstraints="true" tableName="test_concourse_db_migration" />
    </changeSet>

    <changeSet id="create procedure to run adhoc DML statements" author="">
        <createProcedure dbms="postgresql" procedureName="check_and_execute" >
            Create or replace procedure check_and_execute(
                p_dml_sql text,
                p_table_name text,
                p_expected_no_of_rows_to_update_or_delete numeric
            )
            Language plpgsql
            As $$ declare
                rows_affected INTEGER;
                total_rows INTEGER;
            Begin
                EXECUTE format('SELECT COUNT(*) FROM %I', p_table_name) INTO total_rows;

                if p_expected_no_of_rows_to_update_or_delete >= total_rows then
                    raise exception 'Failed. Expected no. of rows (%) to update/delete can not be same or more than the total number of rows (%) in the table',
                        p_expected_no_of_rows_to_update_or_delete,
                        total_rows;
                end if;

                execute p_dml_sql;
                get diagnostics rows_affected = ROW_COUNT;

                if rows_affected != p_expected_no_of_rows_to_update_or_delete then
                    raise exception 'Failed. Statement expected to update/delete % rows but updating % rows. Changes not commited.',
                        p_expected_no_of_rows_to_update_or_delete,
                        rows_affected;
                end if;

                raise notice 'Success. Statement affected % rows. Expected to update/delete LESS THAN or EQUAL to % rows',
                    rows_affected,
                    p_expected_no_of_rows_to_update_or_delete;
            End; $$
        </createProcedure>
    </changeSet>

    <changeSet id="add service_mode column to tokens table" author="">
        <addColumn tableName="tokens">
            <column name="service_mode" type="varchar(255)">
                <constraints nullable="true" unique="false"/>
            </column>
        </addColumn>
    </changeSet>

    <changeSet id="add service_external_id column to tokens table" author="">
        <addColumn tableName="tokens">
            <column name="service_external_id" type="varchar(255)">
                <constraints nullable="true" unique="false"/>
            </column>
        </addColumn>
    </changeSet>


</databaseChangeLog>
